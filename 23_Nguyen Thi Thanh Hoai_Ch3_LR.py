# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CffdL9gfDkvJyvh8YNnVdKDjhgjK1jal
"""

from google.colab import files
from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('/content/drive/My Drive/kc_house_data.csv')
print (df.shape)
df.head(8)

plt.plot(df['price'], df['sqft_living'],'bo')
plt.axis([75000, 150000, 390, 1000])
plt.xlabel(df.columns[0] +'(VND)')
plt.ylabel(df.columns[1] + '(m2)')

from sklearn.model_selection import train_test_split
import numpy
df_train, df_test = train_test_split(df,test_size=0.1)

df_train

df_test

plt.plot(df['price'], df['sqft_living'],'bo')
plt.axis([75000, 150000, 390, 1000])
plt.xlabel(df.columns[0] +'(VND)')
plt.ylabel(df.columns[1] + '(m2)')

X=df_train['price']
y=df_train['sqft_living']

df_train['price']

df_train['sqft_living']

df_test

plt.plot(df['price'], df['sqft_living'],'bo')
plt.axis([75000, 150000, 390, 1000])
plt.xlabel(df_train.columns[0] +'(cm)')
plt.ylabel(df_train.columns[1] + '(kg)')

X=df_train['price']
y=df_train['sqft_living']

y=np.array(y)
y=y.reshape(y.shape[0], 1)
X=np.array(X)
X=X.reshape(X.shape[0], 1)
one = np.ones((X.shape[0], 1))

Xbar = np.concatenate((one,X), axis =1)
print(Xbar.shape)
Xbar

A = np.dot(Xbar.T, Xbar) # nhan 2 ma tran
b = np.dot(Xbar.T, y)
w = np.dot(np.linalg.pinv(A), b) #np.linalg.pinv(A): pseudo-inverse of a matrix.
w_0 = w[0][0]
w_1 = w[1][0]
w

X_test=np.array(df_test['price']).reshape(-1,1)
y_test=np.array(df_test['sqft_living']).reshape(-1,1)

print(X_test)
print(y_test)

y_pred=w_0+w_1*X_test

y_pred

plt.plot(X.T, y.T, 'bo') # data
plt.plot(X_test, y_pred, 'ro')
plt.plot(X_test, y_pred, 'r') # the fitting line
plt.axis([75000, 150000, 390, 1000])
plt.xlabel('price (cm)')
plt.ylabel('sqft_living(kg)')
plt.show()

X_test_e=np.append(X_test,145)
y_pred_e=np.append(y_pred,w_0+w_1*145)
X_test_e=np.append(X_test_e,189)
y_pred_e=np.append(y_pred_e,w_0+w_1*189)

plt.plot(X.T, y.T, 'bo')
plt.plot(X_test, y_pred, 'ro') # data
plt.plot(X_test, y_pred, 'r') # the fitting line
plt.axis([75000, 100000, 390, 700])
plt.xlabel('price (cm)')
plt.ylabel('sqft_living(kg)')
plt.show()

X_test[0]

y_pred_1 = w_1*X_test[0] + w_0
y_pred_2 = w_1*X_test[1] + w_0
print ('Dự đoán giá nhà theo diện tích %.0f m2: %.2f (VND), số liệu thật: %.0f')
print ('Dự đoán giá nhà theo diện tích %.0f m2: %.2f (VND), số liệu thật: %.0f')

df_train['price']

df_train['sqft_living']

from sklearn import datasets, linear_model
# fit the model by Linear Regression
regr = linear_model.LinearRegression(fit_intercept=True)
regr.fit(np.array(df_train['price']).reshape(-1,1), df_train['sqft_living'])
# Compare two results
print ('Nghiệm tìm được bằng scikit-learn : ',regr.intercept_, regr.coef_ )
print ('Nghiệm tìm được từ phương trình (5): ', w.T)

y0=regr.predict(np.array(X_test[0]).reshape(-1,1))
y1=regr.predict(np.array(X_test[1]).reshape(-1,1))
print ('Dự đoán giá nhà theo diện tích %.0f m2: %.2f (VND), số liệu thật: %.0f')
print ('Dự đoán giá nhà theo diện tích %.0f m2: %.2f (VND), số liệu thật: %.0f')

plt.plot(X.T, y.T, 'bo')
plt.plot(X_test_e.reshape(-1,1) , regr.predict(X_test_e.reshape(-1,1)), 'ro') # data
plt.plot(X_test_e.reshape(-1,1), regr.predict(X_test_e.reshape(-1,1)), 'r')
plt.axis([75000, 100000, 390, 700])
plt.xlabel('price (VND)')
plt.ylabel('sqft_living (m2)')
plt.show()